const { Client, GatewayIntentBits, REST, Routes } = require("discord.js"); // ÂºïÂÖ• REST Âíå Routes
const config = require("./config.js");
const fs = require("fs");
const path = require('path');
const { initializePlayer } = require('./player');
const { connectToDatabase } = require('./mongodb');
const colors = require('./UI/colors/colors');
require('dotenv').config();

const client = new Client({
    intents: Object.keys(GatewayIntentBits).map((a) => {
        return GatewayIntentBits[a];
    }),
});

client.config = config;
initializePlayer(client);

client.on("ready", async () => { // Â∞á ready ‰∫ã‰ª∂ËôïÁêÜÂô®Ë®≠ÁÇ∫ async
    console.log(`${colors.cyan}[ SYSTEM ]${colors.reset} ${colors.green}Client logged as ${colors.yellow}${client.user.tag}${colors.reset}`);
    console.log(`${colors.cyan}[ MUSIC ]${colors.reset} ${colors.green}Riffy Music System Ready üéµ${colors.reset}`);
    console.log(`${colors.cyan}[ TIME ]${colors.reset} ${colors.gray}${new Date().toISOString().replace('T', ' ').split('.')[0]}${colors.reset}`);
    client.riffy.init(client.user.id);

    // --- Êåá‰ª§ÈÉ®ÁΩ≤ÈÇèËºØ (ÊØèÊ¨°Ê©üÂô®‰∫∫ÂïüÂãïÊôÇÂü∑Ë°å) ---
    const commands = [];
    const commandsPath = path.join(__dirname, config.commandsDir); // ‰ΩøÁî® path.join Á¢∫‰øùË∑ØÂæëÊ≠£Á¢∫
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        const filePath = path.join(commandsPath, file);
        const command = require(filePath);
        // Ê™¢Êü•Êåá‰ª§ÊòØÂê¶ÂåÖÂê´ 'data' Â±¨ÊÄß (‰æÜËá™ SlashCommandBuilder) Âíå 'run' ÂáΩÊï∏
        if ('data' in command && 'run' in command) {
            commands.push(command.data.toJSON()); // Â∞á SlashCommandBuilder ÁöÑË≥áÊñôËΩâÊèõÁÇ∫ JSON Ê†ºÂºè
            // Â¶ÇÊûú‰Ω†ÈúÄË¶ÅÂú®Ê≠§ËôïÂ∞áÊåá‰ª§ÂÑ≤Â≠òÂà∞ client.commands ‰ª•‰æõÂæåÁ∫åÂü∑Ë°åÔºåÂèØ‰ª•ÈÄôÊ®£ÂÅöÔºö
            // client.commands.set(command.data.name, command);
        } else {
            console.warn(`${colors.yellow}[ WARNING ]${colors.reset} The command at ${filePath} is missing a required "data" or "run" property.`);
        }
    }

    // Âª∫Á´ã REST ÂÆ¢Êà∂Á´Ø‰æÜËàá Discord API ‰∫íÂãï
    const rest = new REST({ version: '10' }).setToken(config.TOKEN || process.env.TOKEN);

    try {
        console.log(`\n${colors.cyan}[ COMMANDS ]${colors.reset} ${colors.green}Started refreshing ${commands.length} application (/) commands.`);

        // ***ÈáçË¶ÅÔºöÈÅ∏Êìá‰Ω†ÁöÑÊåá‰ª§ÈÉ®ÁΩ≤ÊñπÂºè***
        // ÈÅ∏È†Ö 1ÔºöÈÉ®ÁΩ≤Âà∞ÁâπÂÆö‰º∫ÊúçÂô® (ÈÅ©ÂêàÈñãÁôºÂíåÊ∏¨Ë©¶ÔºåÊõ¥Êñ∞ÈÄüÂ∫¶Âø´)
        // Á¢∫‰øù‰Ω†ÁöÑ config.js ‰∏≠Êúâ GUILD_IDÔºå‰∏¶Â∞á 'YOUR_GUILD_ID' ÊõøÊèõÁÇ∫ÂØ¶ÈöõÁöÑ‰º∫ÊúçÂô® ID
        const data = await rest.put(
            Routes.applicationGuildCommands(client.user.id, config.GUILD_ID), // ‰ΩøÁî® GUILD_ID ÈÉ®ÁΩ≤Âà∞ÁâπÂÆö‰º∫ÊúçÂô®
            { body: commands },
        );

        // ÈÅ∏È†Ö 2ÔºöÈÉ®ÁΩ≤ÁÇ∫ÂÖ®ÂüüÊåá‰ª§ (ÈÅ©ÂêàÁîüÁî¢Áí∞Â¢ÉÔºåÂú®ÊâÄÊúâ‰º∫ÊúçÂô®ÂèØÁî®Ôºå‰ΩÜÊõ¥Êñ∞ÈúÄË¶ÅÊôÇÈñì)
        // Â¶ÇÊûúÈÅ∏ÊìáÂÖ®ÂüüÈÉ®ÁΩ≤ÔºåË´ãË®ªËß£Êéâ‰∏äÈù¢ÁöÑ Routes.applicationGuildCommands ÈÇ£Ë°å
        // const data = await rest.put(
        //     Routes.applicationCommands(client.user.id), // ÂÖ®ÂüüÈÉ®ÁΩ≤Ôºå‰∏çÈúÄË¶Å GUILD_ID
        //     { body: commands },
        // );


        console.log(`${colors.cyan}[ COMMANDS ]${colors.reset} ${colors.green}Successfully reloaded ${data.length} application (/) commands.${colors.reset}`);
    } catch (error) {
        console.error(`${colors.red}[ COMMANDS ]${colors.reset} ${colors.red}Failed to load commands:${colors.reset}`, error);
    }
    // --- Êåá‰ª§ÈÉ®ÁΩ≤ÈÇèËºØÁµêÊùü ---
});

fs.readdir("./events", (_err, files) => {
    files.forEach((file) => {
        if (!file.endsWith(".js")) return;
        const event = require(`./events/${file}`);
        let eventName = file.split(".")[0];
        client.on(eventName, event.bind(null, client));
        delete require.cache[require.resolve(`./events/${file}`)];
    });
});

// client.commands Áî®ÊñºÂÑ≤Â≠òÊåá‰ª§Áâ©‰ª∂Ôºå‰ª•‰æøÂú® interactionCreate ‰∫ã‰ª∂‰∏≠Âü∑Ë°åÂÆÉÂÄë
// ‰ΩøÁî® Map ÁµêÊßãÊõ¥Âà©ÊñºÊ†πÊìöÊåá‰ª§ÂêçÁ®±Âø´ÈÄüÊü•Êâæ
client.commands = new Map();
fs.readdir(config.commandsDir, (err, files) => {
    if (err) throw err;
    files.forEach(async (f) => {
        try {
            if (f.endsWith(".js")) {
                let props = require(`${config.commandsDir}/${f}`);
                // Â¶ÇÊûúÊòØ SlashCommandBuilder ÂÆöÁæ©ÁöÑÊåá‰ª§ÔºåÂÖ∂ÂêçÁ®±Âú® props.data.name ‰∏≠
                if (props.data) {
                    client.commands.set(props.data.name, props);
                } else if (props.name) { // ÂÖºÂÆπËàäÁâàÊåá‰ª§ÔºåÂ¶ÇÊûú‰Ω†ÁöÑÊ©üÂô®‰∫∫ÈÇÑÊúâ
                    client.commands.set(props.name, props);
                }
            }
        } catch (err) {
            console.error(`${colors.red}[ ERROR ]${colors.reset} Failed to load command file ${f}:`, err);
        }
    });
});


client.on("raw", (d) => {
    const { GatewayDispatchEvents } = require("discord.js");
    if (![GatewayDispatchEvents.VoiceStateUpdate, GatewayDispatchEvents.VoiceServerUpdate].includes(d.t)) return;
    client.riffy.updateVoiceState(d);
});

client.login(config.TOKEN || process.env.TOKEN).catch((e) => {
    console.log('\n' + '‚îÄ'.repeat(40));
    console.log(`${colors.magenta}${colors.bright}üîê TOKEN VERIFICATION${colors.reset}`);
    console.log('‚îÄ'.repeat(40));
    console.log(`${colors.cyan}[ TOKEN ]${colors.reset} ${colors.red}Authentication Failed ‚ùå${colors.reset}`);
    console.log(`${colors.gray}Error: Turn On Intents or Reset New Token${colors.reset}`);
});

connectToDatabase().then(() => {
    console.log('\n' + '‚îÄ'.repeat(40));
    console.log(`${colors.magenta}${colors.bright}üï∏Ô∏è DATABASE STATUS${colors.reset}`);
    console.log('‚îÄ'.repeat(40));
    console.log(`${colors.cyan}[ DATABASE ]${colors.reset} ${colors.green}MongoDB Online ‚úÖ${colors.reset}`);
}).catch((err) => {
    console.log('\n' + '‚îÄ'.repeat(40));
    console.log(`${colors.magenta}${colors.bright}üï∏Ô∏è DATABASE STATUS${colors.reset}`);
    console.log('‚îÄ'.repeat(40));
    console.log(`${colors.cyan}[ DATABASE ]${colors.reset} ${colors.red}Connection Failed ‚ùå${colors.reset}`);
    console.log(`${colors.gray}Error: ${err.message}${colors.reset}`);
});

const express = require("express");
const app = express();
const port = 3000;
app.get('/', (req, res) => {
    const imagePath = path.join(__dirname, 'index.html');
    res.sendFile(imagePath);
});

app.listen(port, () => {
    console.log('\n' + '‚îÄ'.repeat(40));
    console.log(`${colors.magenta}${colors.bright}üåê SERVER STATUS${colors.reset}`);
    console.log('‚îÄ'.repeat(40));
    console.log(`${colors.cyan}[ SERVER ]${colors.reset} ${colors.green}Online ‚úÖ${colors.reset}`);
    console.log(`${colors.cyan}[ PORT ]${colors.reset} ${colors.yellow}http://localhost:${port}${colors.reset}`);
    console.log(`${colors.cyan}[ TIME ]${colors.reset} ${colors.gray}${new Date().toISOString().replace('T', ' ').split('.')[0]}${colors.reset}`);
    console.log(`${colors.cyan}[ USER ]${colors.reset} ${colors.yellow}GlaceYT${colors.reset}`);
});
